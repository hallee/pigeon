#embed("header")
#embed("nav")
<div id="edit">
<h1>Content Types</h1>
<h2 v-text="plural"></h2>
#embed("Types/type-fields")
</div>

<script src="https://cdn.jsdelivr.net/npm/vue"></script>
<script>
	var edit = new Vue({
		el: "#edit",
		data: {
			name: #js(contentType.name),
			plural: #js(contentType.plural),
			id: #js(contentType.id),
			fields: [
				#for(field in contentType.template) {
					{
						name: #js(field.name),
						type: #js(field.type),
						value: #js(field.value),
						required: #js(field.required)
					\},
				}
			],
			errors: []
		},
		methods: {
			addField: function(type) {
				this.fields.push({
					name: null,
					type: type,
					value: null,
					required: true
				})
			},
			removeField: function(field, event) {
				this.fields.splice( this.fields.indexOf(field), 1 )
			},
			createCategory: function() {
				return {
					name: this.name,
					plural: (this.plural || this.name + 's'),
					id: this.id,
					template: this.fields
				}
			},
			handleSubmit: function(event) {
				const self = this
				self.errors = []
				let category = self.createCategory()

				var xhr = new XMLHttpRequest()
				xhr.open('PATCH', '/type', true)
				xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8')
				xhr.send(JSON.stringify(category))

				xhr.onloadend = function () {
					const location = xhr.getResponseHeader('Location')
					if (location) {
						window.location.href = location
					}

					const response = JSON.parse(xhr.responseText)
					if (response.error) {
						self.handleError(response.reason)
					}
				}
			},
			handleError: function(error) {
				this.errors.push(error)
				if (error == 'A type with that name exists') {
					console.log('Plural error!') // TODO: place a red dot next to "plural" field
				}
			}
		}
	})
</script>
#embed("footer")
