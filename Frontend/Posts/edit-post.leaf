#embed("header")
#embed("nav")
#embed("modal")
<h1>#(category.name)</h1>
<h2>Edit</h2>
<section class="content">
	<div id="edit">
	#embed("Posts/post-fields")
	<modal v-if="showModal">
	<h3 slot="header">Authors</h3>
	<div slot="body">
		#for(user in shared.users) {
			<div>
				<span>#(user.name)</span>
				<label>
					<input
						type="checkbox"
						:checked="authors.map(u => u.id).includes(#js(user.id))"
						v-on:click="modifyAuthor(#js(user.id), $event.target.checked)"
					/>
					<span></span>
				</label>
			</div>
		}
	</div>
	<div slot="footer">
		<button class="modal-default-button" v-on:click="showModal = false">
			Cancel
		</button>
		<button class="modal-default-button" v-on:click="saveAuthors">
			Save
		</button>
	</div>
</modal>
	</div>
</section>
<script src="https://cdn.jsdelivr.net/npm/vue"></script>
<script>
	Vue.component('modal', {
		template: '#modal-template'
	})
	var create = new Vue({
		el: '#edit',
		data: {
			name: #js(category.name),
			plural: #js(category.plural),
			fields: [
				#for(field in post.content) {
					{
						name: #js(field.name),
						type: #js(field.type),
						value: #js(field.value),
						required: #js(field.required)
					\},
				}
			],
			showModal: false,
			authors: [
				#if(post.authors) {
					#for(author in post.authors) {
						{
							id: #js(author.id),
							name: #js(author.name),
							email: #js(author.email),
							privileges: #js(author.privileges),
							timeZoneName: #js(author.timeZoneName),
							timeZoneAbbreviation: #js(author.timeZoneAbbreviation)
						\},
					}
				}
			],
			modifiedAuthors: [],
			errors: []
		},
		methods: {
			createItem: function() {
				return {
					id: #js(post.id),
					categoryID: #js(post.categoryID),
					updated: new Date().toISOString(),
					content: this.fields,
					authors: this.authors.length != 0 ? this.authors : null
				}
			},
			editAuthors: function() {
				this.modifiedAuthors = this.authors.slice()
				this.showModal = true
			},
			modifyAuthor: function(id, add) {
				if ( add && !this.modifiedAuthors.map(u => u.id).includes(id) ) {
					#for(user in shared.users) {
						if ( #js(user.id) == id ) {
							this.modifiedAuthors.push(
								{
									id: #js(user.id),
									name: #js(user.name),
									email: #js(user.email),
									privileges: #js(user.privileges),
									timeZoneName: #js(user.timeZoneName),
									timeZoneAbbreviation: #js(user.timeZoneAbbreviation)
								\})
						\}
					}
				}

				if ( !add ) {
					this.modifiedAuthors = this.modifiedAuthors.filter(u => u.id != id)
				}
			},
			saveAuthors: function() {
				this.authors = this.modifiedAuthors
				this.showModal = false
			},
			removeAuthor: function(author) {
				this.authors = this.authors.filter(user => user.id !== author.id)
			},
			handleSubmit: function(event) {
				const self = this
				self.errors = []
				let item = self.createItem()
				console.log(item.id)
				var xhr = new XMLHttpRequest()
				xhr.open('PATCH', '/content/#(category.plural)', true)
				xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8')
				xhr.send(JSON.stringify(item))

				xhr.onloadend = function () {
					const location = xhr.getResponseHeader('Location')
					if (location) {
						window.location.href = location
					}

					const response = JSON.parse(xhr.responseText)
					if (response.error) {
						self.handleError(response.reason)
					}
				}
			},
			handleError: function(error) {
				this.errors.push(error)
			},
			handleCancel: function() {
				console.log("CANCEL")
			}
		}
	})
</script>
#embed("footer")
